import os
import logging
import re
from typing import List, Optional, Dict
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import gspread
from google.oauth2.service_account import Credentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7145469393"))
GSHEET_ID = os.getenv("GSHEET_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, GSHEET_ID]):
    missing = [name for name, val in [("BOT_TOKEN", BOT_TOKEN), ("GSHEET_ID", GSHEET_ID)] if not val]
    raise RuntimeError(f"–ù–µ –∑–∞–¥–∞–Ω—ã: {', '.join(missing)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
try:
    creds_path = '/etc/secrets/GSPREAD_CREDENTIALS.json'
    creds = Credentials.from_service_account_file(creds_path, scopes=[
        "https://www.googleapis.com/auth/spreadsheets"
    ])
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(GSHEET_ID)
    ws = sh.sheet1
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets!")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ Google Sheets: {e}")
    ws = None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def admin_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="add_post")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="list_posts")]
    ])

def delete_kb(post_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{post_id}")]
    ])

def create_buttons_keyboard(buttons_data: str) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    if not buttons_data or buttons_data == "–Ω–µ—Ç":
        return None
    
    keyboard = []
    try:
        buttons = buttons_data.split('|')
        for button in buttons:
            if ':' in button:
                parts = button.split(':')
                if len(parts) >= 4:
                    # –§–æ—Ä–º–∞—Ç: —Ç–∏–ø:—Ç–µ–∫—Å—Ç:—Ü–µ–Ω–∞:–¥–Ω–∏/—Ñ–∞–π–ª/url
                    btn_type, text, price, extra = parts[0], parts[1], parts[2], parts[3]
                    
                    if btn_type == "file":
                        # –î–ª—è —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (—Ö—ç—à)
                        short_id = hash(extra) % 10000
                        keyboard.append([InlineKeyboardButton(text=text, callback_data=f"file:{price}:{short_id}")])
                    
                    elif btn_type == "channel":
                        # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤
                        keyboard.append([InlineKeyboardButton(text=text, callback_data=f"chan:{price}:{extra}")])
                    
                    elif btn_type == "url":
                        # –î–õ–Ø URL –ö–ù–û–ü–û–ö –ò–°–ü–û–õ–¨–ó–£–ï–ú url, –ê –ù–ï callback_data!
                        keyboard.append([InlineKeyboardButton(text=text, url=extra)])
                        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PostStates(StatesGroup):
    waiting_text = State()
    waiting_photo = State()
    waiting_buttons_choice = State()
    waiting_button_type = State()
    waiting_button_text = State()
    waiting_button_price = State()
    waiting_button_file = State()
    waiting_button_days = State()
    waiting_button_url = State()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(user: types.User):
    if not ws:
        return
        
    try:
        user_id = str(user.id)
        if not user_id.isdigit():
            logger.error(f"Invalid user_id: {user_id}")
            return

        records = ws.get_all_records()
        
        if not any(str(r.get("id", "")).strip() == user_id for r in records):
            ws.append_row([
                user_id,
                user.username or "",
                "",  # file_url
                "",  # subscription_type
                "",  # subscription_end
                "",  # post_id
                "",  # post_text
                "",  # post_photo
                ""   # post_buttons
            ])
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    try:
        await register_user(message.from_user)
        records = ws.get_all_records() if ws else []
        posts = [p for p in records if str(p.get("post_id", "")).strip()]
        
        if not posts:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
            
        for post in posts:
            text = post.get("post_text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            photo_id = post.get("post_photo", "").strip()
            buttons_data = post.get("post_buttons", "").strip()
            
            keyboard = create_buttons_keyboard(buttons_data)
            
            try:
                if photo_id:
                    await message.answer_photo(
                        photo=photo_id,
                        caption=text,
                        reply_markup=keyboard if keyboard else (delete_kb(post["post_id"]) if message.from_user.id == ADMIN_ID else None)
                    )
                else:
                    await message.answer(
                        text=text,
                        reply_markup=keyboard if keyboard else (delete_kb(post["post_id"]) if message.from_user.id == ADMIN_ID else None)
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ {post.get('post_id')}: {e}")
                await message.answer(f"üìÑ {text[:300]}" + ("..." if len(text) > 300 else ""))
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤")

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    await message.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "add_post")
async def add_post_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await state.set_state(PostStates.waiting_text)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await callback.answer()

@dp.callback_query(F.data == "list_posts")
async def list_posts_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
        
    posts = ws.get_all_records() if ws else []
    posts = [p for p in posts if str(p.get("post_id", "")).strip()]
    
    if not posts:
        await callback.message.answer("üì≠ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
        
    for post in posts:
        text = post.get("post_text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
        photo_id = post.get("post_photo", "").strip()
        post_id = post.get("post_id", "N/A")
        buttons_data = post.get("post_buttons", "").strip()
        
        keyboard = create_buttons_keyboard(buttons_data)
        
        try:
            if photo_id:
                await callback.message.answer_photo(
                    photo_id,
                    caption=f"{text}\n\nID: {post_id}\n–ö–Ω–æ–ø–∫–∏: {buttons_data if buttons_data else '–Ω–µ—Ç'}",
                    reply_markup=keyboard if keyboard else delete_kb(post_id))
            else:
                await callback.message.answer(
                    f"{text}\n\nID: {post_id}\n–ö–Ω–æ–ø–∫–∏: {buttons_data if buttons_data else '–Ω–µ—Ç'}",
                    reply_markup=keyboard if keyboard else delete_kb(post_id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            await callback.message.answer(
                f"üìÑ {text[:300]}...\n\nID: {post_id}\n–ö–Ω–æ–ø–∫–∏: {buttons_data if buttons_data else '–Ω–µ—Ç'}",
                reply_markup=delete_kb(post_id))
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_"))
async def delete_post_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
        
    post_id = callback.data.split("_")[1]
    try:
        if ws:
            records = ws.get_all_values()
            for idx, row in enumerate(records[1:], start=2):
                if str(row[5]) == str(post_id):
                    ws.delete_rows(idx)
                    await callback.message.delete()
                    await callback.answer("‚úÖ –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω")
                    return
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(PostStates.waiting_text)
async def process_post_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(PostStates.waiting_photo)
    await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")

@dp.message(PostStates.waiting_photo)
async def process_post_photo(message: Message, state: FSMContext):
    try:
        if message.photo:
            await state.update_data(photo_id=message.photo[-1].file_id)
        elif message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await state.update_data(photo_id="")
        else:
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
            return

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_buttons_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_buttons_no")]
        ])
        
        await state.set_state(PostStates.waiting_buttons_choice)
        await message.answer("üìå –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å—Ç—É?", reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await state.clear()

@dp.callback_query(PostStates.waiting_buttons_choice, F.data.in_(["add_buttons_yes", "add_buttons_no"]))
async def process_buttons_choice(callback: types.CallbackQuery, state: FSMContext):
    try:
        if callback.data == "add_buttons_no":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await state.update_data(buttons="–Ω–µ—Ç")
            await process_final_post(callback.message, state)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÅ –ü—Ä–æ–¥–∞–≤–∞–µ–º—ã–π —Ñ–∞–π–ª", callback_data="button_type_file")],
                [InlineKeyboardButton(text="üîê –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª", callback_data="button_type_channel")],
                [InlineKeyboardButton(text="üîó –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="button_type_url")],
                [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="buttons_done")]
            ])
            await state.set_state(PostStates.waiting_button_type)
            await state.update_data(buttons_data=[])
            await callback.message.answer("üéõ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏:", reply_markup=keyboard)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.callback_query(PostStates.waiting_button_type, F.data.startswith("button_type_"))
async def process_button_type(callback: types.CallbackQuery, state: FSMContext):
    try:
        btn_type = callback.data.split("_")[2]
        await state.update_data(current_button_type=btn_type)
        
        if btn_type in ["file", "channel", "url"]:
            await state.set_state(PostStates.waiting_button_text)
            await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        elif btn_type == "done":
            await process_final_post(callback.message, state)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(PostStates.waiting_button_text)
async def process_button_text(message: Message, state: FSMContext):
    try:
        await state.update_data(current_button_text=message.text)
        data = await state.get_data()
        btn_type = data.get("current_button_type")
        
        if btn_type in ["file", "channel"]:
            await state.set_state(PostStates.waiting_button_price)
            await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:")
        elif btn_type == "url":
            await state.set_state(PostStates.waiting_button_url)
            await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ URL:")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(PostStates.waiting_button_price)
async def process_button_price(message: Message, state: FSMContext):
    try:
        price = message.text.strip()
        if not price.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")
            return
            
        await state.update_data(current_button_price=price)
        data = await state.get_data()
        btn_type = data.get("current_button_type")
        
        if btn_type == "file":
            await state.set_state(PostStates.waiting_button_file)
            await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:")
        elif btn_type == "channel":
            await state.set_state(PostStates.waiting_button_days)
            await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ (–∏–ª–∏ '–Ω–∞–≤—Å–µ–≥–¥–∞'):")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω—ã: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(PostStates.waiting_button_file)
async def process_button_file(message: Message, state: FSMContext):
    try:
        if not (message.document or message.photo):
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ:")
            return
            
        file_id = message.document.file_id if message.document else message.photo[-1].file_id
        await state.update_data(current_button_file=file_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫
        data = await state.get_data()
        buttons_data = data.get("buttons_data", [])
        btn_type = data.get("current_button_type")
        text = data.get("current_button_text")
        price = data.get("current_button_price")
        file_id = data.get("current_button_file")
        
        buttons_data.append(f"{btn_type}:{text}:{price}:{file_id}")
        await state.update_data(buttons_data=buttons_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await offer_more_buttons(message, state)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(PostStates.waiting_button_days)
async def process_button_days(message: Message, state: FSMContext):
    try:
        days = message.text.strip()
        if days.lower() != "–Ω–∞–≤—Å–µ–≥–¥–∞" and not days.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π –∏–ª–∏ '–Ω–∞–≤—Å–µ–≥–¥–∞':")
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫
        data = await state.get_data()
        buttons_data = data.get("buttons_data", [])
        btn_type = data.get("current_button_type")
        text = data.get("current_button_text")
        price = data.get("current_button_price")
        
        buttons_data.append(f"{btn_type}:{text}:{price}:{days}")
        await state.update_data(buttons_data=buttons_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await offer_more_buttons(message, state)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–Ω–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(PostStates.waiting_button_url)
async def process_button_url(message: Message, state: FSMContext):
    try:
        url = message.text.strip()
        if not (url.startswith('http://') or url.startswith('https://')):
            await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        data = await state.get_data()
        buttons_data = data.get("buttons_data", [])
        btn_type = data.get("current_button_type")
        text = data.get("current_button_text")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: url:—Ç–µ–∫—Å—Ç:0:url_–∞–¥—Ä–µ—Å
        buttons_data.append(f"{btn_type}:{text}:0:{url}")
        await state.update_data(buttons_data=buttons_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await offer_more_buttons(message, state)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ URL: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

async def offer_more_buttons(message: Message, state: FSMContext):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–æ–ø–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÅ –ü—Ä–æ–¥–∞–≤–∞–µ–º—ã–π —Ñ–∞–π–ª", callback_data="button_type_file")],
        [InlineKeyboardButton(text="üîê –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª", callback_data="button_type_channel")],
        [InlineKeyboardButton(text="üîó –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="button_type_url")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="button_type_done")]
    ])
    await state.set_state(PostStates.waiting_button_type)
    await message.answer("üéõ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?", reply_markup=keyboard)

async def process_final_post(message: Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    try:
        data = await state.get_data()
        text = data.get("text", "")
        photo_id = data.get("photo_id", "")
        buttons_data = data.get("buttons_data", [])
        
        if ws:
            records = ws.get_all_records()
            
            post_ids = []
            for p in records:
                try:
                    post_id_str = str(p.get("post_id", "")).strip()
                    if post_id_str:
                        post_ids.append(int(post_id_str))
                except (ValueError, AttributeError):
                    continue
            post_id = max(post_ids + [0]) + 1
            
            user_ids = {str(r["id"]) for r in records if str(r.get("id", "")).strip()}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
            buttons_str = "|".join(buttons_data) if buttons_data else "–Ω–µ—Ç"
            ws.append_row(["", "", "", "", "", post_id, text, photo_id, buttons_str])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            keyboard = create_buttons_keyboard(buttons_str)
            
            # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç
            success = 0
            for user_id in user_ids:
                try:
                    if photo_id:
                        await bot.send_photo(
                            user_id, 
                            photo=photo_id, 
                            caption=text,
                            reply_markup=keyboard
                        )
                    else:
                        await bot.send_message(
                            user_id, 
                            text=text,
                            reply_markup=keyboard
                        )
                    success += 1
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            await message.answer(
                f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω (ID: {post_id})\n"
                f"–ö–Ω–æ–ø–∫–∏: {len(buttons_data)} —à—Ç.\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(user_ids)}"
            )
        else:
            await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")
    finally:
        await state.clear()

# Webhook
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

@app.on_event("startup")
async def startup():
    if os.getenv("RENDER"):
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
async def health_check():
    return {"status": "ok", "sheets": bool(ws)}
