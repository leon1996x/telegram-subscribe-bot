import os
import json
import –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
paid_files = {}

# === –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ===
def load_paid_files():
    global paid_files
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r") as f:
                paid_files = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
                for user_id, files in paid_files.items():
                    for file_id, expiry_str in files.items():
                        if expiry_str:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                            paid_files[user_id][file_id] = datetime.fromisoformat(expiry_str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
            paid_files = {}

def save_paid_files():
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        save_data = {}
        for user_id, files in paid_files.items():
            save_data[user_id] = {}
            for file_id, expiry in files.items():
                save_data[user_id][file_id] = expiry.isoformat() if isinstance(expiry, datetime) else expiry
        
        with open(USERS_FILE, "w") as f:
            json.dump(save_data, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤ ===
def check_expired_files():
    now = datetime.now()
    expired_entries = []
    
    for user_id, files in paid_files.items():
        for file_id, expiry in files.items():
            if isinstance(expiry, datetime) and now >= expiry:
                expired_entries.append((user_id, file_id))
    
    for user_id, file_id in expired_entries:
        try:
            logger.info(f"–£–¥–∞–ª–µ–Ω –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫ —Ñ–∞–π–ª—É {file_id}")
            del paid_files[user_id][file_id]
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            if not paid_files[user_id]:
                del paid_files[user_id]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    if expired_entries:
        save_paid_files()

# === –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É ===
def file_access_watcher():
    logger.info("[WATCHER] –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–æ–≤ –∫ —Ñ–∞–π–ª–∞–º")
    while True:
        check_expired_files()
        time.sleep(60)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ñ–∞–π–ª–∞ ===
def generate_file_payment_link(user_id: int, file_id: str, price: int, file_name: str):
    params = {
        "do": "pay",
        "products[0][name]": f"–§–∞–π–ª: {file_name}",
        "products[0][price]": price,
        "products[0][quantity]": 1,
        "order_id": f"file_{user_id}_{file_id}",
        "customer_extra": f"–û–ø–ª–∞—Ç–∞ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    }
    query = "&".join([f"{k}={v}" for k, v in params.items()])
    return f"{PAYFORM_URL}/?{query}"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
try:
    creds_path = '/etc/secrets/GSPREAD_CREDENTIALS.json'
    creds = Credentials.from_service_account_file(creds_path, scopes=[
        "https://www.googleapis.com/auth/spreadsheets"
    ])
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(GSHEET_ID)
    ws = sh.sheet1
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets!")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ Google Sheets: {e}")
    ws = None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def admin_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="add_post")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="list_posts")]
    ])

def delete_kb(post_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{post_id}")]
    ])

def create_buttons_keyboard(buttons_data: str) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    if not buttons_data or buttons_data == "–Ω–µ—Ç":
        logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        return None
    
    keyboard = []
    try:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        if "url" in buttons_data and "https://" in buttons_data and "|" not in buttons_data:
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            parts = buttons_data.split('\n')
            url_parts = []
            for part in parts:
                if part.strip() and part != "url":
                    url_parts.append(part.strip())
            
            if len(url_parts) >= 2:
                text, url = url_parts[0], url_parts[1]
                if url.startswith(('http://', 'https://')):
                    buttons_data = f"url|{text}|{url}"
                    logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {buttons_data}")
                else:
                    # –ò—â–µ–º URL –≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞—Å—Ç—è—Ö
                    for url_part in url_parts:
                        if url_part.startswith(('http://', 'https://')):
                            buttons_data = f"url|{text}|{url_part}"
                            logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {buttons_data}")
                            break
        
        buttons = buttons_data.split('|')
        logger.info(f"–†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: {buttons}")
        
        i = 0
        while i < len(buttons):
            button = buttons[i]
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–Ω–æ–ø–∫—É [{i}]: {button}")
            
            # –î–ª—è URL –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç: url|—Ç–µ–∫—Å—Ç|url_–∞–¥—Ä–µ—Å
            if button == "url" and i + 2 < len(buttons):
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ URL –∫–Ω–æ–ø–∫–∞")
                text = buttons[i + 1]
                url = buttons[i + 2]
                logger.info(f"–¢–µ–∫—Å—Ç: {text}, URL: {url}")
                
                if url.startswith(('http://', 'https://')):
                    keyboard.append([InlineKeyboardButton(text=text, url=url)])
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ URL –∫–Ω–æ–ø–∫–∞: {text} -> {url}")
                    i += 3  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞: url, —Ç–µ–∫—Å—Ç, url
                    continue
                else:
                    logger.error(f"Invalid URL: {url}")
            
            # –î–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç: file|—Ç–µ–∫—Å—Ç|—Ü–µ–Ω–∞|file_id
            elif button == "file" and i + 3 < len(buttons):
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞")
                text = buttons[i + 1]
                price = buttons[i + 2]
                file_id = buttons[i + 3]
                logger.info(f"–¢–µ–∫—Å—Ç: {text}, –¶–µ–Ω–∞: {price}, File ID: {file_id}")
                
                keyboard.append([InlineKeyboardButton(text=f"{text} - {price}‚ÇΩ", callback_data=f"buy_file:{file_id}:{price}")])
                i += 4  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 4 —ç–ª–µ–º–µ–Ω—Ç–∞
                continue
            
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å :
            elif ':' in button:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º :")
                parts = button.split(':')
                logger.info(f"–ß–∞—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏: {parts}")
                
                if len(parts) >= 4:
                    btn_type, text, price, extra = parts[0], parts[1], parts[2], parts[3]
                    
                    if btn_type == "file":
                        keyboard.append([InlineKeyboardButton(text=f"{text} - {price}‚ÇΩ", callback_data=f"buy_file:{extra}:{price}")])
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞: {text}")
                    
                    elif btn_type == "channel":
                        keyboard.append([InlineKeyboardButton(text=text, callback_data=f"chan:{price}:{extra}")])
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {text}")
            
            i += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}", exc_info=True)
        return None
    
    logger.info(f"–ò—Ç–æ–≥–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")
    return InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PostStates(StatesGroup):
    waiting_text = State()
    waiting_photo = State()
    waiting_buttons_choice = State()
    waiting_button_type = State()
    waiting_button_text = State()
    waiting_button_price = State()
    waiting_button_file = State()
    waiting_button_days = State()
    waiting_button_url = State()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(user: types.User):
    if not ws:
        return
        
    try:
        user_id = str(user.id)
        if not user_id.isdigit():
            logger.error(f"Invalid user_id: {user_id}")
            return

        records = ws.get_all_records()
        
        if not any(str(r.get("id", "")).strip() == user_id for r in records):
            ws.append_row([
                user_id,
                user.username or "",
                "",  # file_url
                "",  # subscription_type
                "",  # subscription_end
                "",  # post_id
                "",  # post_text
                "",  # post_photo
                ""   # post_buttons
            ])
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    try:
        await register_user(message.from_user)
        records = ws.get_all_records() if ws else []
        posts = [p for p in records if str(p.get("post_id", "")).strip()]
        
        if not posts:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
            
        for post in posts:
            text = post.get("post_text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            photo_id = post.get("post_photo", "").strip()
            buttons_data = post.get("post_buttons", "").strip()
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: '{buttons_data}'")
            keyboard = create_buttons_keyboard(buttons_data)
            logger.info(f"–°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")
            
            try:
                if photo_id:
                    await message.answer_photo(
                        photo=photo_id,
                        caption=text,
                        reply_markup=keyboard if keyboard else (delete_kb(post["post_id"]) if message.from_user.id == ADMIN_ID else None)
                    )
                else:
                    await message.answer(
                        text=text,
                        reply_markup=keyboard if keyboard else (delete_kb(post["post_id"]) if message.from_user.id == ADMIN_ID else None)
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ {post.get('post_id')}: {e}")
                await message.answer(f"üìÑ {text[:300]}" + ("..." if len(text) > 300 else ""))
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤")

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    await message.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith("buy_file:"))
async def buy_file_callback(callback: types.CallbackQuery):
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: buy_file:file_id:price
        parts = callback.data.split(':')
        if len(parts) < 3:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–æ–ø–∫–∏")
            return
            
        file_id = parts[1]
        price = parts[2]
        user_id = str(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
        if user_id in paid_files and file_id in paid_files[user_id]:
            expiry = paid_files[user_id][file_id]
            if isinstance(expiry, datetime) and datetime.now() < expiry:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                await callback.message.answer_document(file_id, caption="‚úÖ –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª!")
                await callback.answer()
                return
            elif expiry == "forever":
                # –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
                await callback.message.answer_document(file_id, caption="‚úÖ –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª!")
                await callback.answer()
                return
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å
        payment_url = generate_file_payment_link(callback.from_user.id, file_id, price, "–§–∞–π–ª")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {price}‚ÇΩ", url=payment_url)]
        ])
        
        await callback.message.answer(
            f"üì¶ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å {price}‚ÇΩ\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ñ–∞–π–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.callback_query(F.data == "add_post")
async def add_post_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await state.set_state(PostStates.waiting_text)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await callback.answer()

@dp.callback_query(F.data == "list_posts")
async def list_posts_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
        
    posts = ws.get_all_records() if ws else []
    posts = [p for p in posts if str(p.get("post_id", "")).strip()]
    
    if not posts:
        await callback.message.answer("üì≠ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
        
    for post in posts:
        text = post.get("post_text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
        photo_id = post.get("post_photo", "").strip()
        post_id = post.get("post_id", "N/A")
        buttons_data = post.get("post_buttons", "").strip()
        
        keyboard = create_buttons_keyboard(buttons_data)
        
        try:
            if photo_id:
                await callback.message.answer_photo(
                    photo_id,
                    caption=f"{text}\n\nID: {post_id}\n–ö–Ω–æ–ø–∫–∏: {buttons_data if buttons_data else '–Ω–µ—Ç'}",
                    reply_markup=keyboard if keyboard else delete_kb(post_id))
            else:
                await callback.message.answer(
                    f"{text}\n\nID: {post_id}\n–ö–Ω–æ–ø–∫–∏: {buttons_data if buttons_data else '–Ω–µ—Ç'}",
                    reply_markup=keyboard if keyboard else delete_kb(post_id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            await callback.message.answer(
                f"üìÑ {text[:300]}...\n\nID: {post_id}\n–ö–Ω–æ–ø–∫–∏: {buttons_data if buttons_data else '–Ω–µ—Ç'}",
                reply_markup=delete_kb(post_id))
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_"))
async def delete_post_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
        
    post_id = callback.data.split("_")[1]
    try:
        if ws:
            records = ws.get_all_values()
            for idx, row in enumerate(records[1:], start=2):
                if str(row[5]) == str(post_id):
                    ws.delete_rows(idx)
                    await callback.message.delete()
                    await callback.answer("‚úÖ –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω")
                    return
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(PostStates.waiting_text)
async def process_post_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(PostStates.waiting_photo)
    await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")

@dp.message(PostStates.waiting_photo)
async def process_post_photo(message: Message, state: FSMContext):
    try:
        if message.photo:
            await state.update_data(photo_id=message.photo[-1].file_id)
        elif message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await state.update_data(photo_id="")
        else:
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
            return

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_buttons_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_buttons_no")]
        ])
        
        await state.set_state(PostStates.waiting_buttons_choice)
        await message.answer("üìå –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å—Ç—É?", reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await state.clear()

@dp.callback_query(PostStates.waiting_buttons_choice, F.data.in_(["add_buttons_yes", "add_buttons_no"]))
async def process_buttons_choice(callback: types.CallbackQuery, state: FSMContext):
    try:
        if callback.data == "add_buttons_no":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await state.update_data(buttons="–Ω–µ—Ç")
            await process_final_post(callback.message, state)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–Ω–æ–ø–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÅ –ü—Ä–æ–¥–∞–≤–∞–µ–º—ã–π —Ñ–∞–π–ª", callback_data="button_type_file")],
                [InlineKeyboardButton(text="üîê –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª", callback_data="button_type_channel")],
                [InlineKeyboardButton(text="üîó –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="button_type_url")],
                [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="button_type_done")]
            ])
            await state.set_state(PostStates.waiting_button_type)
            await state.update_data(buttons_data=[])
            await callback.message.answer("üéõ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏:", reply_markup=keyboard)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.callback_query(PostStates.waiting_button_type, F.data.startswith("button_type_"))
async def process_button_type(callback: types.CallbackQuery, state: FSMContext):
    try:
        btn_type = callback.data.split("_")[2]
        await state.update_data(current_button_type=btn_type)
        
        if btn_type in ["file", "channel", "url"]:
            await state.set_state(PostStates.waiting_button_text)
            await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        elif btn_type == "done":
            await process_final_post(callback.message, state)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(PostStates.waiting_button_text)
async def process_button_text(message: Message, state: FSMContext):
    try:
        await state.update_data(current_button_text=message.text)
        data = await state.get_data()
        btn_type = data.get("current_button_type")
        
        if btn_type in ["file", "channel"]:
            await state.set_state(PostStates.waiting_button_price)
            await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:")
        elif btn_type == "url":
            await state.set_state(PostStates.waiting_button_url)
            await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ URL:")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(PostStates.waiting_button_price)
async def process_button_price(message: Message, state: FSMContext):
    try:
        price = message.text.strip()
        if not price.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")
            return
            
        await state.update_data(current_button_price=price)
        data = await state.get_data()
        btn_type = data.get("current_button_type")
        
        if btn_type == "file":
            await state.set_state(PostStates.waiting_button_file)
            await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:")
        elif btn_type == "channel":
            await state.set_state(PostStates.waiting_button_days)
            await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ (–∏–ª–∏ '–Ω–∞–≤—Å–µ–≥–¥–∞'):")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–Ω—ã: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(PostStates.waiting_button_file)
async def process_button_file(message: Message, state: FSMContext):
    try:
        if not (message.document or message.photo):
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ:")
            return
            
        file_id = message.document.file_id if message.document else message.photo[-1].file_id
        await state.update_data(current_button_file=file_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫
        data = await state.get_data()
        buttons_data = data.get("buttons_data", [])
        btn_type = data.get("current_button_type")
        text = data.get("current_button_text")
        price = data.get("current_button_price")
        file_id = data.get("current_button_file")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: file|—Ç–µ–∫—Å—Ç|—Ü–µ–Ω–∞|file_id
        buttons_data.append(f"file|{text}|{price}|{file_id}")
        await state.update_data(buttons_data=buttons_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await offer_more_buttons(message, state)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(PostStates.waiting_button_days)
async def process_button_days(message: Message, state: FSMContext):
    try:
        days = message.text.strip()
        if days.lower() != "–Ω–∞–≤—Å–µ–≥–¥–∞" and not days.isdigit():
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π –∏–ª–∏ '–Ω–∞–≤—Å–µ–≥–¥–∞':")
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫
        data = await state.get_data()
        buttons_data = data.get("buttons_data", [])
        btn_type = data.get("current_button_type")
        text = data.get("current_button_text")
        price = data.get("current_button_price")
        
        buttons_data.append(f"{btn_type}:{text}:{price}:{days}")
        await state.update_data(buttons_data=buttons_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await offer_more_buttons(message, state)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–Ω–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(PostStates.waiting_button_url)
async def process_button_url(message: Message, state: FSMContext):
    try:
        url = message.text.strip()
        if not (url.startswith('http://') or url.startswith('https://')):
            await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫
        data = await state.get_data()
        buttons_data = data.get("buttons_data", [])
        text = data.get("current_button_text")
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: url|—Ç–µ–∫—Å—Ç|url_–∞–¥—Ä–µ—Å
        buttons_data.append(f"url|{text}|{url}")
        await state.update_data(buttons_data=buttons_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await offer_more_buttons(message, state)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ URL: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

async def offer_more_buttons(message: Message, state: FSMContext):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–æ–ø–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÅ –ü—Ä–æ–¥–∞–≤–∞–µ–º—ã–π —Ñ–∞–π–ª", callback_data="button_type_file")],
        [InlineKeyboardButton(text="üîê –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª", callback_data="button_type_channel")],
        [InlineKeyboardButton(text="üîó –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="button_type_url")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="button_type_done")]
    ])
    await state.set_state(PostStates.waiting_button_type)
    await message.answer("üéõ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?", reply_markup=keyboard)

@dp.callback_query(PostStates.waiting_button_type, F.data == "button_type_done")
async def process_buttons_done(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫"""
    await process_final_post(callback.message, state)
    await callback.answer()

async def process_final_post(message: Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    try:
        data = await state.get_data()
        text = data.get("text", "")
        photo_id = data.get("photo_id", "")
        buttons_data = data.get("buttons_data", [])
        
        if ws:
            records = ws.get_all_records()
            
            post_ids = []
            for p in records:
                try:
                    post_id_str = str(p.get("post_id", "")).strip()
                    if post_id_str:
                        post_ids.append(int(post_id_str))
                except (ValueError, AttributeError):
                    continue
            post_id = max(post_ids + [0]) + 1
            
            user_ids = {str(r["id"]) for r in records if str(r.get("id", "")).strip()}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É (–æ–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ |)
            buttons_str = "|".join(buttons_data) if buttons_data else "–Ω–µ—Ç"
            ws.append_row(["", "", "", "", "", post_id, text, photo_id, buttons_str])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            keyboard = create_buttons_keyboard(buttons_str)
            
            # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç
            success = 0
            for user_id in user_ids:
                try:
                    if photo_id:
                        await bot.send_photo(
                            user_id, 
                            photo=photo_id, 
                            caption=text,
                            reply_markup=keyboard
                        )
                    else:
                        await bot.send_message(
                            user_id, 
                            text=text,
                            reply_markup=keyboard
                        )
                    success += 1
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            await message.answer(
                f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω (ID: {post_id})\n"
                f"–ö–Ω–æ–ø–∫–∏: {len(buttons_data)} —à—Ç.\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}/{len(user_ids)}"
            )
        else:
            await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")
    finally:
        await state.clear()

# === Prodamus webhook –¥–ª—è —Ñ–∞–π–ª–æ–≤ ===
@app.post("/webhook/prodamus/files")
async def prodamus_files_webhook(request: Request):
    check_expired_files()  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–º –∞–ø–¥–µ–π—Ç–µ
    try:
        # –ß–∏—Ç–∞–µ–º JSON –∏–ª–∏ form-data
        try:
            data = await request.json()
        except:
            form = await request.form()
            data = dict(form)

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º customer_extra
        raw_order = str(data.get("order_id", ""))
        customer_extra = unquote(str(data.get("customer_extra", "")))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –∏ file_id –∏–∑ order_id
        if raw_order.startswith("file_") and len(raw_order.split("_")) >= 3:
            parts = raw_order.split("_")
            user_id = parts[1]
            file_id = "_".join(parts[2:])  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ file_id —Å–æ–¥–µ—Ä–∂–∏—Ç _
        elif "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" in customer_extra:
            user_id = customer_extra.split()[-1]
            # –î–ª—è —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å file_id
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å file_id –≤ customer_extra –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
            file_id = "unknown"  # –ó–∞–≥–ª—É—à–∫–∞
        else:
            await bot.send_message(ADMIN_ID, f"[ALERT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id/file_id: {data}")
            return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id/file_id"}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É (–±–µ—Å—Å—Ä–æ—á–Ω—ã–π)
        if user_id not in paid_files:
            paid_files[user_id] = {}
        paid_files[user_id][file_id] = "forever"  # –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
        save_paid_files()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª:")
            await bot.send_document(user_id, file_id)
            await bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª —Ñ–∞–π–ª {file_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        return {"status": "success"}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        await bot.send_message(ADMIN_ID, f"[ALERT] –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return {"status": "error", "message": str(e)}

# Webhook
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

@app.on_event("startup")
async def startup():
    if os.getenv("RENDER"):
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–∞—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    load_paid_files()
    threading.Thread(target=file_access_watcher, daemon=True).start()

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
async def health_check():
    return {"status": "ok", "sheets": bool(ws), "paid_files_count": len(paid_files)}
