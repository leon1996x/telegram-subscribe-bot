import os
import logging

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode

import gspread
from google.oauth2.service_account import Credentials

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# ---------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7145469393"))
GSHEET_ID = os.getenv("GSHEET_ID")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not GSHEET_ID:
    raise RuntimeError("GSHEET_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ---------- BOT / DP / APP ----------
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# ---------- GOOGLE SHEETS ----------
def _get_creds_path() -> str:
    # Render Secret Files –¥–æ—Å—Ç—É–ø–Ω—ã —Ç—É—Ç
    path1 = "/etc/secrets/GSPREAD_CREDENTIALS.json"
    # –∏/–∏–ª–∏ –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª –∫–∞–∫ Secret File –±–µ–∑ /etc/secrets)
    path2 = "GSPREAD_CREDENTIALS.json"
    if os.path.exists(path1):
        return path1
    if os.path.exists(path2):
        return path2
    raise FileNotFoundError(
        "–ù–µ –Ω–∞–π–¥–µ–Ω GSPREAD_CREDENTIALS.json –Ω–∏ –≤ /etc/secrets, –Ω–∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"
    )

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
CREDENTIALS_FILE = _get_creds_path()
creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
gc = gspread.authorize(creds)
sh = gc.open_by_key(GSHEET_ID)
worksheet = sh.sheet1  # —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π

# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
headers = ["id", "name", "file_url", "subscription_type", "subscription_end",
           "post_id", "post_text", "post_photo"]
vals = worksheet.get_all_values()
if not vals:
    worksheet.append_row(headers)

# ---------- FSM ----------
class PostForm(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()

# ---------- –•–ï–õ–ü–ï–†–´ ----------
def admin_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="add_post")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data="del_post_menu")]
    ])

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
@dp.message(CommandStart())
async def on_start(message: Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    records = worksheet.get_all_records()
    posts = [r for r in records if str(r.get("post_id", "")).strip() != ""]
    if not posts:
        await message.answer("üì≠ –ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    for post in posts:
        text = post.get("post_text", "") or ""
        photo_file_id = post.get("post_photo", "") or ""
        if photo_file_id:
            await message.answer_photo(photo_file_id, caption=text)
        else:
            await message.answer(text)

@dp.message(Command("admin"))
async def on_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await message.answer("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", reply_markup=admin_kb())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ ---
@dp.callback_query(F.data == "add_post")
async def cb_add_post(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(PostForm.waiting_for_text)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await callback.answer()

@dp.message(PostForm.waiting_for_text)
async def get_post_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text or "")
    await state.set_state(PostForm.waiting_for_photo)
    await message.answer("üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏: –Ω–µ—Ç)")

@dp.message(PostForm.waiting_for_photo)
async def get_post_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("text", "")
    photo_file_id = ""

    if message.photo:
        photo_file_id = message.photo[-1].file_id
    elif (message.text or "").strip().lower() == "–Ω–µ—Ç":
        photo_file_id = ""
    else:
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'")

    # –ù–æ–≤—ã–π post_id ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—á—ë—Ç—á–∏–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ—Å—Ç–∞–º
    records = worksheet.get_all_records()
    existing = [r for r in records if str(r.get("post_id", "")).strip() != ""]
    post_id = len(existing) + 1

    # –ü–∏—à–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç—Ä–æ–≥–æ –ø–æ–¥ —Ç–≤–æ–∏ –∫–æ–ª–æ–Ω–∫–∏
    worksheet.append_row([
        "", "", "", "", "",              # id, name, file_url, subscription_type, subscription_end
        str(post_id),                    # post_id
        text,                            # post_text
        photo_file_id                    # post_photo (file_id, –Ω–µ URL!)
    ])

    await state.clear()
    await message.answer("‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ ---
@dp.callback_query(F.data == "del_post_menu")
async def cb_del_menu(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    records = worksheet.get_all_records()
    posts = [r for r in records if str(r.get("post_id", "")).strip() != ""]
    if not posts:
        return await callback.message.answer("üì≠ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞ –ø–æ id
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å #{p['post_id']}", callback_data=f"del_{p['post_id']}")]
        for p in posts
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –ø–æ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("del_"))
async def cb_delete_post(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    post_id = callback.data.split("_", 1)[1]
    records = worksheet.get_all_records()
    # —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ –≤—Ç–æ—Ä–æ–π (–ø–µ—Ä–≤–∞—è ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏)
    for idx, row in enumerate(records, start=2):
        if str(row.get("post_id")) == str(post_id):
            worksheet.delete_rows(idx)
            await callback.message.answer(f"üóë –ü–æ—Å—Ç #{post_id} —É–¥–∞–ª—ë–Ω")
            await callback.answer()
            return
    await callback.message.answer("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await callback.answer()

# ---------- WEBHOOK ----------
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}" if RENDER_HOSTNAME else None

@app.on_event("startup")
async def on_startup():
    if not WEBHOOK_URL:
        log.error("–ù–µ –Ω–∞–π–¥–µ–Ω RENDER_EXTERNAL_HOSTNAME ‚Äî webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    me = await bot.get_me()
    log.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL} | –±–æ—Ç @{me.username} ({me.id})")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.delete_webhook()
    finally:
        await bot.session.close()

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = bot.session.json_loads(request.body if isinstance(request.body, str) else None)  # –∑–∞–≥–ª—É—à–∫–∞, aiogram —Å–∞–º –ø–∞—Ä—Å–∏—Ç
    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±:
    from aiogram.types import Update
    upd = Update(**data)
    await dp.feed_update(bot, upd)
    return {"ok": True}

@app.get("/")
async def root():
    return {"status": "ok", "webhook": WEBHOOK_URL}
