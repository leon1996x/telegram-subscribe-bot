import os
import logging
from typing import Optional, List

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import gspread
from google.oauth2.service_account import Credentials

logging.basicConfig(level=logging.INFO)

# -------------------- ENV --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7145469393"))
GSHEET_ID = os.getenv("GSHEET_ID")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
if not GSHEET_ID:
    raise RuntimeError("GSHEET_ID –Ω–µ –∑–∞–¥–∞–Ω")

# -------------------- FastAPI --------------------
app = FastAPI()

# -------------------- Aiogram --------------------
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher(storage=MemoryStorage())

# -------------------- Google Sheets auth (–∞–≤—Ç–æ–ø–æ–∏—Å–∫ –∫–ª—é—á–∞) --------------------
def find_credentials_path() -> str:
    env_path = os.getenv("GSPREAD_CREDENTIALS", "").strip()
    candidates = [
        env_path,
        "/etc/secrets/GSPREAD_CREDENTIALS.json",
        "/etc/secrets/credentials.json",
        "/etc/secrets/creds.json",
        "GSPREAD_CREDENTIALS.json",
        "credentials.json",
        "creds.json",
    ]
    for p in candidates:
        if p and os.path.exists(p):
            return p
    raise FileNotFoundError(
        "–§–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. "
        "–ü–æ–ª–æ–∂–∏ –µ–≥–æ –≤ Secret Files –∫–∞–∫ GSPREAD_CREDENTIALS.json "
        "–∏–ª–∏ –∑–∞–¥–∞–π –ø—É—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GSPREAD_CREDENTIALS."
    )

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
CREDENTIALS_FILE = find_credentials_path()
creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
gc = gspread.authorize(creds)
sh = gc.open_by_key(GSHEET_ID)
ws = sh.sheet1  # —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–µ—Ä–≤—ã–º –ª–∏—Å—Ç–æ–º

# -------------------- –¢–∞–±–ª–∏—Ü–∞: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ --------------------
REQUIRED_HEADERS = [
    "id",
    "name",
    "file_url",
    "subscription_type",
    "subscription_end",
    "post_id",
    "post_text",
    "post_photo",
]

def ensure_headers():
    values = ws.get_all_values()
    if not values:
        ws.append_row(REQUIRED_HEADERS)
        return
    headers = values[0]
    if headers != REQUIRED_HEADERS:
        # –µ—Å–ª–∏ –ø—É—Å—Ç–æ/–¥—Ä—É–≥–∏–µ ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –Ω—É–∂–Ω—ã–µ
        # (–¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –æ—Å—Ç–∞—é—Ç—Å—è)
        ws.resize(rows=len(values), cols=len(REQUIRED_HEADERS))
        ws.update("1:1", [REQUIRED_HEADERS])

ensure_headers()

def get_all_records() -> List[dict]:
    # get_all_records –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    return ws.get_all_records()

def next_post_id() -> int:
    recs = get_all_records()
    exist = [int(r["post_id"]) for r in recs if str(r.get("post_id", "")).strip().isdigit()]
    return (max(exist) + 1) if exist else 1

def get_all_user_ids() -> List[int]:
    recs = get_all_records()
    result = []
    for r in recs:
        val = str(r.get("id", "")).strip()
        if val.isdigit():
            result.append(int(val))
    return sorted(set(result))

def upsert_user(chat_id: int, name: str):
    recs = ws.get_all_values()
    headers = recs[0] if recs else []
    id_col = headers.index("id") + 1
    name_col = headers.index("name") + 1
    # –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for i in range(2, len(recs) + 1):
        if str(ws.cell(i, id_col).value).strip() == str(chat_id):
            # –æ–±–Ω–æ–≤–∏–º name –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            ws.update_cell(i, name_col, name or "")
            return
    # –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –¥–æ–±–∞–≤–∏–º
    ws.append_row([str(chat_id), name, "", "", "", "", "", ""])

def add_post_row(post_id: int, text: str, photo: str):
    ws.append_row(["", "", "", "", "", post_id, text, photo])

def delete_post_row(post_id: str) -> bool:
    recs = get_all_records()
    # enumerate with start=2 (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å)
    for i, row in enumerate(recs, start=2):
        if str(row.get("post_id")) == str(post_id):
            ws.delete_rows(i)
            return True
    return False

# -------------------- FSM --------------------
class PostForm(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def admin_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="add_post")],
        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã (—É–¥–∞–ª–∏—Ç—å)", callback_data="list_posts")],
    ])

def del_kb(post_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{post_id}")]
    ])

# -------------------- –•–µ–Ω–¥–ª–µ—Ä—ã --------------------
@dp.message(F.text == "/start")
async def start_cmd(m: Message):
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name = (m.from_user.full_name or "").strip()
    upsert_user(m.chat.id, name)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    recs = get_all_records()
    posts = [r for r in recs if str(r.get("post_id", "")).strip() != ""]
    if not posts:
        await m.answer("–ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üö´")
        return
    for p in posts:
        text = p.get("post_text", "") or ""
        photo = p.get("post_photo", "") or ""
        if photo:
            await m.answer_photo(photo, caption=text)
        else:
            await m.answer(text)

@dp.message(F.text == "/admin")
async def admin_cmd(m: Message):
    if m.from_user.id != ADMIN_ID:
        return await m.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await m.answer("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", reply_markup=admin_menu_kb())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ ---
@dp.callback_query(F.data == "add_post")
async def add_post_cb(cq: types.CallbackQuery, state: FSMContext):
    if cq.from_user.id != ADMIN_ID:
        return await cq.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(PostForm.waiting_for_text)
    await cq.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")

@dp.message(PostForm.waiting_for_text)
async def add_post_text(m: Message, state: FSMContext):
    await state.update_data(text=m.text or "")
    await state.set_state(PostForm.waiting_for_photo)
    await m.answer("üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ <b>–Ω–µ—Ç</b>")

@dp.message(PostForm.waiting_for_photo)
async def add_post_photo(m: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("text", "") or ""
    photo_url = ""

    if m.photo:
        file = await bot.get_file(m.photo[-1].file_id)
        photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    elif (m.text or "").strip().lower() == "–Ω–µ—Ç":
        photo_url = ""

    pid = next_post_id()
    add_post_row(pid, text, photo_url)
    await m.answer(f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω (id={pid})")
    await state.clear()

    # —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º
    for uid in get_all_user_ids():
        try:
            if photo_url:
                await bot.send_photo(uid, photo_url, caption=text)
            else:
                await bot.send_message(uid, text)
        except Exception as e:
            logging.warning(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

    # –∞–¥–º–∏–Ω—É –¥—É–±–ª—å —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–∏—Ç—å
    if photo_url:
        await bot.send_photo(ADMIN_ID, photo_url, caption=text, reply_markup=del_kb(pid))
    else:
        await bot.send_message(ADMIN_ID, text, reply_markup=del_kb(pid))

# --- –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ---
@dp.callback_query(F.data == "list_posts")
async def list_posts_cb(cq: types.CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        return await cq.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    posts = [r for r in get_all_records() if str(r.get("post_id", "")).strip() != ""]
    if not posts:
        return await cq.message.answer("üö´ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤")
    for p in posts:
        pid = p.get("post_id")
        text = p.get("post_text", "") or ""
        photo = p.get("post_photo", "") or ""
        if photo:
            await cq.message.answer_photo(photo, caption=f"{text}\n\n(id={pid})", reply_markup=del_kb(pid))
        else:
            await cq.message.answer(f"{text}\n\n(id={pid})", reply_markup=del_kb(pid))

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ ---
@dp.callback_query(F.data.startswith("del:"))
async def delete_post_cb(cq: types.CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        return await cq.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    pid = cq.data.split(":", 1)[1]
    ok = delete_post_row(pid)
    if ok:
        await cq.answer("–£–¥–∞–ª–µ–Ω–æ")
        await cq.message.edit_reply_markup(reply_markup=None)
        await cq.message.answer(f"üóë –ü–æ—Å—Ç {pid} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã")
    else:
        await cq.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

# -------------------- Webhook --------------------
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}" if RENDER_HOSTNAME else None

@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logging.error("RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω ‚Äî webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
async def root():
    return {"status": "ok", "webhook": WEBHOOK_URL}
