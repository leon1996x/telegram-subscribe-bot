import os
import logging
from typing import List, Optional

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import gspread
from google.oauth2.service_account import Credentials

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7145469393"))
GSHEET_ID = "1YkIDFyCc561vPVNnKWsjFtFmHQeXl5vlH_0Rc7wXihE"  # ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
CREDENTIALS_FILE = "GSPREAD_CREDENTIALS.json"

logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

app = FastAPI()

# --- Google Sheets ---
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
gc = gspread.authorize(credentials)
sh = gc.open_by_key(GSHEET_ID)
worksheet = sh.worksheet("BotData")  # –†–∞–±–æ—Ç–∞–µ–º —Å –ª–∏—Å—Ç–æ–º BotData

# --- FSM (–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞) ---
class PostStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()

# --- –ö–æ–º–∞–Ω–¥–∞ /start (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç) ---
@dp.message_handler(commands=['start'])
async def start_handler(message: Message):
    last_post = worksheet.get_all_records()[-1]  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
    post_text = last_post["post_text"]
    post_photo = last_post["post_photo"]

    if post_photo:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=post_photo,
            caption=post_text,
            reply_markup=create_delete_button(last_post["post_id"]) if str(message.from_user.id) == ADMIN_ID else None
        )
    else:  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(
            post_text,
            reply_markup=create_delete_button(last_post["post_id"]) if str(message.from_user.id) == ADMIN_ID else None
        )

# --- –ö–æ–º–∞–Ω–¥–∞ /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ---
@dp.message_handler(commands=['admin'])
async def admin_panel(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="add_post"))
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç" ---
@dp.callback_query_handler(lambda c: c.data == "add_post")
async def add_post_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await PostStates.waiting_for_text.set()

# --- –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ ---
@dp.message_handler(state=PostStates.waiting_for_text)
async def process_post_text(message: Message, state: FSMContext):
    await state.update_data(post_text=message.text)
    await message.answer("üì§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, –µ—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ):")
    await PostStates.waiting_for_photo.set()

# --- –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫) ---
@dp.message_handler(content_types=['photo'], state=PostStates.waiting_for_photo)
async def process_post_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    data = await state.get_data()
    await save_post_to_sheets(data["post_text"], photo_id)
    await message.answer("‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.finish()

@dp.message_handler(commands=['skip'], state=PostStates.waiting_for_photo)
async def skip_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    await save_post_to_sheets(data["post_text"], "")
    await message.answer("‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω (–±–µ–∑ —Ñ–æ—Ç–æ)!")
    await state.finish()

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ Google Sheets ---
async def save_post_to_sheets(post_text: str, post_photo: str):
    last_id = len(worksheet.get_all_records()) + 1
    worksheet.append_row([last_id, "", "", "", "", last_id, post_text, post_photo])

# --- –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ---
def create_delete_button(post_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"delete_post_{post_id}"))
    return keyboard

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ ---
@dp.callback_query_handler(lambda c: c.data.startswith('delete_post_'))
async def delete_post(callback_query: types.CallbackQuery):
    post_id = int(callback_query.data.split('_')[-1])
    records = worksheet.get_all_records()
    for idx, row in enumerate(records, start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2 —Å—Ç—Ä–æ–∫–∏ (1 - –∑–∞–≥–æ–ª–æ–≤–∫–∏)
        if row["post_id"] == post_id:
            worksheet.delete_rows(idx)
            break
    await bot.answer_callback_query(callback_query.id, "üóëÔ∏è –ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω!")
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

# --- Webhook (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ) ---
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}" if RENDER_HOSTNAME else None

@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω RENDER_EXTERNAL_HOSTNAME ‚Äî webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
async def root():
    return {"status": "ok", "webhook": WEBHOOK_URL}
