import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import gspread
from google.oauth2.service_account import Credentials

logging.basicConfig(level=logging.INFO)

app = FastAPI()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7145469393"))  # ID –∞–¥–º–∏–Ω–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- Google Sheets ---
scope = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
client = gspread.authorize(creds)
worksheet = client.open("BotData").worksheet("BotData")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def admin_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç"))
    return kb


def delete_keyboard(post_id: str):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{post_id}"))
    return kb


@app.get("/")
async def root():
    return {"status": "ok"}


@app.post(f"/webhook/{BOT_TOKEN}")
async def telegram_webhook(request: Request):
    update = await request.json()
    logging.info(update)

    if "message" in update:
        message = update["message"]
        chat_id = message["chat"]["id"]
        text = message.get("text", "")

        # --- –ê–¥–º–∏–Ω ---
        if chat_id == ADMIN_ID:
            if text == "/admin":
                await bot.send_message(chat_id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard())
            elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç":
                await bot.send_message(chat_id, "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞")
                worksheet.update("D2", "waiting_post")  # —Ñ–ª–∞–≥ —á—Ç–æ –∂–¥—ë–º –ø–æ—Å—Ç
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥—ë–º –ª–∏ –º—ã –ø–æ—Å—Ç
                flag = worksheet.acell("D2").value
                if flag == "waiting_post":
                    worksheet.update("D2", "")  # —Å–±—Ä–æ—Å
                    post_id = str(message["message_id"])

                    # –†–∞—Å—Å—ã–ª–∫–∞
                    users = worksheet.col_values(1)[1:]  # –≤—Å–µ chat_id
                    for uid in users:
                        try:
                            if "photo" in message:
                                file_id = message["photo"][-1]["file_id"]
                                await bot.send_photo(uid, file_id, caption=text)
                            else:
                                await bot.send_message(uid, text)
                        except Exception as e:
                            logging.warning(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–∏—Ç—å
                    if "photo" in message:
                        file_id = message["photo"][-1]["file_id"]
                        await bot.send_photo(chat_id, file_id, caption=text, reply_markup=delete_keyboard(post_id))
                    else:
                        await bot.send_message(chat_id, text, reply_markup=delete_keyboard(post_id))

        # --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
        else:
            if text == "/start":
                ids = worksheet.col_values(1)
                if str(chat_id) not in ids:
                    worksheet.append_row([str(chat_id)])
                await bot.send_message(chat_id, "–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç—ã")

    elif "callback_query" in update:
        cq = update["callback_query"]
        chat_id = cq["from"]["id"]
        data = cq["data"]

        if chat_id == ADMIN_ID and data.startswith("delete:"):
            msg_id = cq["message"]["message_id"]
            await bot.delete_message(chat_id, msg_id)
            await bot.answer_callback_query(cq["id"], "–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω")

    return {"ok": True}

