import os
import logging
import json
import asyncio
from typing import Optional, List

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import gspread
from google.oauth2.service_account import Credentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# -------------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7145469393"))
GSHEET_ID = os.getenv("GSHEET_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
if not GSHEET_ID:
    raise RuntimeError("GSHEET_ID –Ω–µ –∑–∞–¥–∞–Ω")

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --------------------
app = FastAPI()
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher(storage=MemoryStorage())

# -------------------- –†–∞–±–æ—Ç–∞ —Å Google Sheets --------------------
def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
    try:
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
        creds_json = os.getenv("GSPREAD_CREDENTIALS_JSON")
        if creds_json:
            creds_dict = json.loads(creds_json)
            credentials = Credentials.from_service_account_info(creds_dict)
            return gspread.authorize(credentials)
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ß–µ—Ä–µ–∑ —Ñ–∞–π–ª (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        creds_file = "service_account.json"
        if os.path.exists(creds_file):
            credentials = Credentials.from_service_account_file(creds_file)
            return gspread.authorize(credentials)
            
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google Sheets")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        raise

try:
    gc = init_google_sheets()
    sh = gc.open_by_key(GSHEET_ID)
    ws = sh.sheet1
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: {e}")
    ws = None  # –†–µ–∂–∏–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def ensure_headers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    if not ws:
        return
        
    try:
        headers = ws.row_values(1)
        required_headers = [
            "id", "name", "file_url", 
            "subscription_type", "subscription_end",
            "post_id", "post_text", "post_photo"
        ]
        
        if headers != required_headers:
            ws.clear()
            ws.append_row(required_headers)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")

def get_all_posts() -> List[dict]:
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    if not ws:
        return []
        
    try:
        records = ws.get_all_records()
        return [r for r in records if str(r.get("post_id", "")).strip()]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
        return []

def add_post(text: str, photo_url: str = "") -> Optional[int]:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ ID"""
    if not ws:
        return None
        
    try:
        posts = get_all_posts()
        post_id = max([p.get("post_id", 0) for p in posts] + [0]) + 1
        ws.append_row(["", "", "", "", "", post_id, text, photo_url])
        return post_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        return None

def delete_post(post_id: int) -> bool:
    """–£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –ø–æ ID"""
    if not ws:
        return False
        
    try:
        records = ws.get_all_values()
        for idx, row in enumerate(records[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if str(row[5]) == str(post_id):  # post_id –≤ 6 –∫–æ–ª–æ–Ω–∫–µ (–∏–Ω–¥–µ–∫—Å 5)
                ws.delete_rows(idx)
                return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        return False

# -------------------- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM --------------------
class PostStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def admin_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="add_post")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤", callback_data="list_posts")]
    ])

def delete_button(post_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{post_id}")]
    ])

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ --------------------
@dp.message(F.text == "/start")
async def start_command(message: Message):
    try:
        posts = get_all_posts()
        if not posts:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            return
            
        for post in posts:
            text = post.get("post_text", "")
            photo = post.get("post_photo", "")
            
            if photo:
                await message.answer_photo(
                    photo=photo,
                    caption=text
                )
            else:
                await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤.")

@dp.message(F.text == "/admin")
async def admin_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
        
    await message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_keyboard()
    )

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM --------------------
@dp.callback_query(F.data == "add_post")
async def add_post_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
        
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await state.set_state(PostStates.waiting_for_text)
    await callback.answer()

@dp.message(PostStates.waiting_for_text)
async def process_post_text(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
        
    await state.update_data(text=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    await state.set_state(PostStates.waiting_for_photo)

@dp.message(PostStates.waiting_for_photo)
async def process_post_photo(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        text = data.get("text", "")
        
        if not text:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
            
        photo_url = ""
        
        if message.photo:
            file = await bot.get_file(message.photo[-1].file_id)
            photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
        elif message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            pass
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç
        post_id = add_post(text, photo_url)
        if post_id:
            await message.answer(f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {post_id})")
            
            # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            asyncio.create_task(broadcast_post(text, photo_url, post_id))
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.")
    finally:
        await state.clear()

async def broadcast_post(text: str, photo_url: str, post_id: int):
    """–†–∞—Å—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
        if photo_url:
            await bot.send_photo(
                chat_id=ADMIN_ID,
                photo=photo_url,
                caption=f"{text}\n\nID: {post_id}",
                reply_markup=delete_button(post_id)
            )
        else:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=f"{text}\n\nID: {post_id}",
                reply_markup=delete_button(post_id)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞: {e}")

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ --------------------
@dp.callback_query(F.data == "list_posts")
async def list_posts_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
        
    posts = get_all_posts()
    if not posts:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        return
        
    for post in posts:
        text = post.get("post_text", "")
        photo = post.get("post_photo", "")
        post_id = post.get("post_id", "")
        
        if photo:
            await callback.message.answer_photo(
                photo=photo,
                caption=f"{text}\n\nID: {post_id}",
                reply_markup=delete_button(post_id)
            )
        else:
            await callback.message.answer(
                text=f"{text}\n\nID: {post_id}",
                reply_markup=delete_button(post_id)
            )
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_"))
async def delete_post_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
        
    post_id = callback.data.split("_")[1]
    if not post_id.isdigit():
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞.")
        return
        
    if delete_post(int(post_id)):
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer("–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω.")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç.")

# -------------------- Webhook --------------------
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

@app.on_event("startup")
async def on_startup():
    ensure_headers()
    if os.getenv("RENDER"):
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"ok": False}

@app.get("/")
async def health_check():
    return {"status": "ok", "bot": "running"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
