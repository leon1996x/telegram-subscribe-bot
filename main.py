import os
import logging
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor
from oauth2client.service_account import ServiceAccountCredentials

logging.basicConfig(level=logging.INFO)

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 7145469393  # —Ç–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º id
SPREADSHEET_NAME = "MyBotData"  # –Ω–∞–∑–≤–∞–Ω–∏–µ Google-—Ç–∞–±–ª–∏—Ü—ã

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# --- GOOGLE SHEETS ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("google_credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).sheet1

# --- –ö–ù–û–ü–ö–ò ---
def admin_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"))
    kb.add(KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"))
    kb.add(KeyboardButton("üö™ –í—ã–π—Ç–∏"))
    return kb

# --- –ö–û–ú–ê–ù–î–ê /admin ---
@dp.message_handler(commands=["admin"])
async def cmd_admin(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard())
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ---
@dp.message_handler(lambda message: message.text in ["üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", "üö™ –í—ã–π—Ç–∏"])
async def handle_admin_buttons(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    if message.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ":
        data = sheet.get_all_values()
        if not data:
            await message.answer("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ üì≠")
        else:
            text = "\n".join([f"{i+1}. {row[0]}" for i, row in enumerate(data)])
            await message.answer(f"üìã –î–∞–Ω–Ω—ã–µ:\n{text}")

    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å":
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:")
        dp.register_message_handler(add_record, state="add_record")

    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        dp.register_message_handler(delete_record, state="delete_record")

    elif message.text == "üö™ –í—ã–π—Ç–∏":
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏.", reply_markup=ReplyKeyboardRemove())

# --- –î–û–ë–ê–í–õ–ï–ù–ò–ï ---
async def add_record(message: types.Message):
    sheet.append_row([message.text])
    await message.answer("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_keyboard())
    dp.unregister_message_handler(add_record, state="add_record")

# --- –£–î–ê–õ–ï–ù–ò–ï ---
async def delete_record(message: types.Message):
    try:
        row = int(message.text)
        sheet.delete_rows(row)
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å {row} —É–¥–∞–ª–µ–Ω–∞!", reply_markup=admin_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    dp.unregister_message_handler(delete_record, state="delete_record")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
