import os
import logging
import asyncio

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import gspread
from google.oauth2.service_account import Credentials

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7145469393"))
GSHEET_ID = os.getenv("GSHEET_ID")
CREDENTIALS_FILE = "GSPREAD_CREDENTIALS.json"

logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# --- Google Sheets ---
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
gc = gspread.authorize(credentials)
sh = gc.open_by_key(GSHEET_ID)
worksheet = sh.worksheet("BotData")  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π –ª–∏—Å—Ç BotData

# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ ---
class PostForm(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()

# --- –•–µ–Ω–¥–ª–µ—Ä /start (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã) ---
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    records = worksheet.get_all_records()
    posts = [r for r in records if r.get("post_id")]
    if not posts:
        await message.answer("–ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üö´")
        return

    for post in posts:
        text = post.get("post_text", "")
        photo = post.get("post_photo", "")
        if photo:
            await message.answer_photo(photo, caption=text)
        else:
            await message.answer(text)

# --- –•–µ–Ω–¥–ª–µ—Ä /admin ---
@dp.message(F.text == "/admin")
async def cmd_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="add_post")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data="del_post_menu")],
    ])
    await message.answer("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", reply_markup=kb)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ ---
@dp.callback_query(F.data == "add_post")
async def process_add_post(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.set_state(PostForm.waiting_for_text)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")

@dp.message(PostForm.waiting_for_text)
async def process_post_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(PostForm.waiting_for_photo)
    await message.answer("üì∑ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'): ")

@dp.message(PostForm.waiting_for_photo)
async def process_post_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data["text"]
    photo_url = ""

    if message.photo:
        file = await bot.get_file(message.photo[-1].file_id)
        photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    elif message.text.lower() == "–Ω–µ—Ç":
        photo_url = ""

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º post_id = —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ + 1
    records = worksheet.get_all_records()
    post_id = len([r for r in records if r.get("post_id")]) + 1

    worksheet.append_row(["", "", "", "", "", post_id, text, photo_url])
    await message.answer("‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ ---
@dp.callback_query(F.data == "del_post_menu")
async def process_del_menu(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    records = worksheet.get_all_records()
    posts = [r for r in records if r.get("post_id")]

    if not posts:
        return await callback.message.answer("üö´ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    for post in posts:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{post['post_id']}")]
        ])
        text = post.get("post_text", "")
        photo = post.get("post_photo", "")
        if photo:
            await callback.message.answer_photo(photo, caption=text, reply_markup=kb)
        else:
            await callback.message.answer(text, reply_markup=kb)

@dp.callback_query(F.data.startswith("del_"))
async def process_delete_post(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    post_id = callback.data.split("_")[1]
    records = worksheet.get_all_records()
    for i, row in enumerate(records, start=2):  # —Å 2-–π —Å—Ç—Ä–æ–∫–∏, —Ç.–∫. 1-—è ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if str(row.get("post_id")) == post_id:
            worksheet.delete_rows(i)
            await callback.message.answer(f"üóë –ü–æ—Å—Ç {post_id} —É–¥–∞–ª—ë–Ω")
            return

    await callback.message.answer("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# --- Webhook ---
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
RENDER_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}" if RENDER_HOSTNAME else None

@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω RENDER_EXTERNAL_HOSTNAME ‚Äî webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
async def root():
    return {"status": "ok", "webhook": WEBHOOK_URL}
