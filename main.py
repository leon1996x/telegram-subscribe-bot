import os
import json
import threading
from datetime import datetime
from urllib.parse import urlencode, unquote
from fastapi import FastAPI, Request
import telebot

# === CONFIG ===
TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PAYFORM_URL = "https://menyayrealnost.payform.ru"
CHANNEL_ID = -1002681575953      # ID —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞
PRICE = 50                       # —Ü–µ–Ω–∞ ‚Äî –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
USERS_FILE = "users.json"
ADMIN_ID = 513148972             # —Ç–≤–æ–π Telegram ID

bot = telebot.TeleBot(TOKEN)
app = FastAPI()
active_users = {}


# === –ó–∞–≥—Ä—É–∑–∫–∞ / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
def load_users():
    global active_users
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r") as f:
                data = json.load(f)
                active_users = {int(uid): datetime.fromisoformat(ts) for uid, ts in data.items()}
        except:
            active_users = {}

def save_users():
    with open(USERS_FILE, "w") as f:
        json.dump({uid: ts.isoformat() for uid, ts in active_users.items()}, f)


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É ===
def generate_payment_link(user_id: int):
    params = {
        "do": "pay",
        "products[0][name]": "–û–ø–ª–∞—Ç–∞ –∑–∞ –≥–∞–π–¥ '–ú–µ–Ω—è—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å'",
        "products[0][price]": PRICE,
        "products[0][quantity]": 1,
        "order_id": str(user_id),
        "customer_extra": f"–û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    }
    return f"{PAYFORM_URL}/?{urlencode(params)}"


# === Telegram webhook ===
@app.post("/webhook/telegram")
async def telegram_webhook(request: Request):
    json_data = await request.json()
    update = telebot.types.Update.de_json(json_data)
    threading.Thread(target=lambda: bot.process_new_updates([update])).start()
    return {"ok": True}


# === Prodamus webhook ===
@app.post("/webhook")
async def prodamus_webhook(request: Request):
    try:
        try:
            data = await request.json()
        except:
            form = await request.form()
            data = dict(form)

        raw_order = str(data.get("order_id", ""))
        customer_extra = unquote(str(data.get("customer_extra", "")))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
        if raw_order.isdigit():
            user_id = int(raw_order)
        elif "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" in customer_extra:
            user_id = int(customer_extra.split()[-1])
        else:
            bot.send_message(ADMIN_ID, f"[ALERT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id: {data}")
            return {"status": "error"}

        # –î–∞–µ–º –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –∞–≤—Ç–æ–∫–∏–∫–∞
        try:
            bot.unban_chat_member(CHANNEL_ID, user_id)
        except:
            pass  # –≤–¥—Ä—É–≥ –æ–Ω —É–∂–µ —Ç–∞–º

        invite = bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            expire_date=None,
            member_limit=1
        )

        bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!\n–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª:\n{invite.invite_link}")
        bot.send_message(ADMIN_ID, f"üí∞ –û–ø–ª–∞—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –°—Å—ã–ª–∫–∞ –≤—ã–¥–∞–Ω–∞.")

        active_users[user_id] = datetime.now()
        save_users()

        return {"status": "success"}

    except Exception as e:
        bot.send_message(ADMIN_ID, f"[ALERT] –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}


# === /start ===
@bot.message_handler(commands=["start"])
def start(message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(
            f"–û–ø–ª–∞—Ç–∏—Ç—å {PRICE}‚ÇΩ –∑–∞ –≥–∞–π–¥ ¬´–ú–µ–Ω—è—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å¬ª", 
            url=generate_payment_link(message.from_user.id)
        )
    )
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–∞–π–¥—É ¬´–ú–µ–Ω—è—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å¬ª, –æ–ø–ª–∞—Ç–∏ {PRICE}‚ÇΩ.",
        reply_markup=markup
    )


# === –ö–æ—Ä–µ–Ω—å ===
@app.get("/")
async def home():
    return {"status": "Bot is running!"}


# === –ó–∞–ø—É—Å–∫ ===
load_users()
